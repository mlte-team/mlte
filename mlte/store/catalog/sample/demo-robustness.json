{
    "header": {
        "identifier": "demo-robustness",
        "creator": "admin",
        "created": 1727114774,
        "updater": null,        
        "updated": -1,
        "catalog_id": "sample"
    },
    "tags": ["Computer Vision"],
    "property_category": "Robustness",
    "property": "Robustness to Noise (Image Blur)",
    "code_type": "measurement",
    "code": "# %% [markdown]\n# ### Robustness QAS Measurements\n# \n# Evidence collected in this section checks for the Robustness scenarios.\n\n# %%\n# General functions.\nimport pandas as pd\n\nfrom mlte.spec.condition import Condition\nfrom mlte.validation.result import Failure, Success\nfrom mlte.value.types.array import Array\n\n\nclass RankSums(Array):\n    \"\"\"A RankSums array is an array with the results of the ranksums function (stat on first pos, p-value on second).\"\"\"\n\n    @classmethod\n    def p_value_greater_or_equal_to(cls, threshold: float) -> Condition:\n        condition: Condition = Condition(\n            \"p_value_greater_or_equal_to\",\n            [threshold],\n            lambda value: Success(\n                f\"P-Value {value.array[1]} is greater or equal to {threshold}\"\n            )\n            if value.array[1] >= threshold\n            else Failure(\n                f\"P-Value {value.array[1]} is less than threshold {threshold}\"\n            ),\n        )\n        return condition\n\nfrom typing import Any, Dict\n\nimport numpy as np\n\nfrom mlte.evidence.metadata import EvidenceMetadata\nfrom mlte.spec.condition import Condition\nfrom mlte.validation.result import Failure, Success\nfrom mlte.value.base import ValueBase\n\n\nclass MultipleRanksums(ValueBase):\n    \"\"\"An array with multiple ranksums.\"\"\"\n\n    def __init__(\n        self,\n        evidence_metadata: EvidenceMetadata,\n        array: np.ndarray,\n        num_pops: int = 1,\n    ):\n        super().__init__(self, evidence_metadata)\n\n        self.array = array\n        \"\"\"The array to store data in.\"\"\"\n\n        self.num_pops: int = num_pops\n        \"\"\"Number of populations or groups..\"\"\"\n\n    def serialize(self) -> Dict[str, Any]:\n        doc: dict[str, Any] = {}\n        doc[\"array\"] = [val for val in self.array]\n        doc[\"num_pops\"] = self.num_pops\n        return doc\n\n    @staticmethod\n    def deserialize(\n        evidence_metadata: EvidenceMetadata, json_: dict[str, Any]\n    ) -> MultipleRanksums:\n        return MultipleRanksums(\n            evidence_metadata, np.asarray(json_[\"array\"]), json_[\"num_pops\"]\n        )\n\n    @classmethod\n    def all_p_values_greater_or_equal_than(cls, threshold: float) -> Condition:\n        \"\"\"Checks if the p-value for multiple ranksums is below given threshold.\"\"\"\n        condition: Condition = Condition(\n            \"all_p_values_greater_or_equal_than\",\n            [threshold],\n            lambda value: Success(\n                f\"All p-values are equal to or over threshold {value.get_total_p_value_threshold(threshold)}\"\n            )\n            if len(value.get_low_p_values(threshold)) == 0\n            else Failure(\n                f\"One or more p-values are below threshold {value.get_total_p_value_threshold(threshold)}: {value.get_low_p_values(threshold)}\"\n            ),\n        )\n        return condition\n\n    def get_total_p_value_threshold(self, threshold: float) -> float:\n        return threshold / self.num_pops\n\n    def get_low_p_values(self, threshold: float):\n        \"\"\"Generates a dict of all cases that didn't go over the threshold.\"\"\"\n        low_cases = {}\n\n        ranksum: dict[str, list]\n        for ranksum in self.array:\n            id = next(iter(ranksum))\n            pval = ranksum[id][1]\n            if pval < self.get_total_p_value_threshold(threshold=threshold):\n                low_cases[id] = pval\n\n        return low_cases\n\n\ndef calculate_base_accuracy(df_results: pd.DataFrame) -> pd.DataFrame:\n    # Calculate the base model accuracy result per data label\n    df_pos = (\n        df_results[df_results[\"model correct\"] == True].groupby(\"label\").count()\n    )\n    df_pos.drop(columns=[\"prediced_label\"], inplace=True)\n    df_neg = (\n        df_results[df_results[\"model correct\"] == False]\n        .groupby(\"label\")\n        .count()\n    )\n    df_neg.drop(columns=[\"prediced_label\"], inplace=True)\n    df_neg.rename(columns={\"model correct\": \"model incorrect\"}, inplace=True)\n    df_res = df_pos.merge(\n        df_neg, right_on=\"label\", left_on=\"label\", how=\"outer\"\n    )\n    df_res.fillna(0, inplace=True)\n    df_res[\"model acc\"] = df_res[\"model correct\"] / (\n        df_res[\"model correct\"] + df_res[\"model incorrect\"]\n    )\n    df_res[\"count\"] = df_res[\"model correct\"] + df_res[\"model incorrect\"]\n    df_res.drop(columns=[\"model correct\", \"model incorrect\"], inplace=True)\n    df_res.head()\n\n    return df_res\n\n\ndef calculate_accuracy_per_set(\n    data_folder: str, df_results: pd.DataFrame, df_res: pd.DataFrame\n) -> pd.DataFrame:\n    # Calculate the model accuracy per data label for each blurred data set\n    base_filename = \"FlowerModelv1_TestSetResults\"\n    ext_filename = \".csv\"\n    set_filename = [\"_blur2x8\", \"_blur5x8\", \"_blur0x8\", \"_noR\", \"_noG\", \"_noB\"]\n\n    col_root = \"model acc\"\n\n    for fs in set_filename:\n        filename = os.path.join(data_folder, base_filename + fs + ext_filename)\n        colname = col_root + fs\n\n        df_temp = pd.read_csv(filename)\n        df_temp.drop(columns=[\"Unnamed: 0\"], inplace=True)\n\n        df_pos = (\n            df_temp[df_temp[\"model correct\"] == True].groupby(\"label\").count()\n        )\n        df_pos.drop(columns=[\"prediced_label\"], inplace=True)\n        df_neg = (\n            df_results[df_results[\"model correct\"] == False]\n            .groupby(\"label\")\n            .count()\n        )\n        df_neg.drop(columns=[\"prediced_label\"], inplace=True)\n        df_neg.rename(\n            columns={\"model correct\": \"model incorrect\"}, inplace=True\n        )\n        df_res2 = df_pos.merge(\n            df_neg, right_on=\"label\", left_on=\"label\", how=\"outer\"\n        )\n        df_res2.fillna(0, inplace=True)\n\n        df_res2[colname] = df_res2[\"model correct\"] / (\n            df_res2[\"model correct\"] + df_res2[\"model incorrect\"]\n        )\n        df_res2.drop(columns=[\"model correct\", \"model incorrect\"], inplace=True)\n\n        df_res = df_res.merge(\n            df_res2, right_on=\"label\", left_on=\"label\", how=\"outer\"\n        )\n\n    df_res.head()\n    return df_res\n\n\ndef print_model_accuracy(df_res: pd.DataFrame, key: str, name: str):\n    model_acc = sum(df_res[key] * df_res[\"count\"]) / sum(df_res[\"count\"])\n    print(name, model_acc)\n\n# %%\n# Prepare all data. Same as the case above, we will use CSV files that contain results of a previous execution of the model.\ndf_results = garden.load_base_results(DATASETS_DIR)\ndf_res = calculate_base_accuracy(df_results)\ndf_res = calculate_accuracy_per_set(DATASETS_DIR, df_results, df_res)\ndf_info = garden.load_taxonomy(DATASETS_DIR)\ndf_all = garden.merge_taxonomy_with_results(df_res, df_info, \"label\", \"Label\")\n\n# fill in missing model accuracy data\ndf_all[\"model acc_noR\"].fillna(0, inplace=True)\ndf_all[\"model acc_noG\"].fillna(0, inplace=True)\ndf_all[\"model acc_noB\"].fillna(0, inplace=True)\n\n# %% [markdown]\n# Now do the actual measurements. First simply see the model accuracy across blurs.\n\n# %%\n# view changes in model accuracy\nprint_model_accuracy(df_res, \"model acc\", \"base model accuracy\")\nprint_model_accuracy(\n    df_res, \"model acc_blur2x8\", \"model accuracy with 2x8 blur\"\n)\nprint_model_accuracy(\n    df_res, \"model acc_blur5x8\", \"model accuracy with 5x8 blur\"\n)\nprint_model_accuracy(\n    df_res, \"model acc_blur0x8\", \"model accuracy with 0x8 blur\"\n)\n\n# %% [markdown]\n# Measure the ranksums (p-value) for all blur cases, using `scipy.stats.ranksums` and the `ExternalMeasurement` wrapper.\n\n# %%\nimport scipy.stats\n\nfrom mlte.measurement.external_measurement import ExternalMeasurement\n\nmy_blur = [\"2x8\", \"5x8\", \"0x8\"]\nfor i in range(len(my_blur)):\n    # Define measurements.\n    ranksum_measurement = ExternalMeasurement(\n        f\"ranksums blur{my_blur[i]}\", RankSums, scipy.stats.ranksums\n    )\n\n    # Evaluate.\n    ranksum: RankSums = ranksum_measurement.evaluate(\n        df_res[\"model acc\"], df_res[f\"model acc_blur{my_blur[i]}\"]\n    )\n\n    # Inspect values\n    print(ranksum)\n\n    # Save to artifact store\n    ranksum.save(force=True)\n\n# %% [markdown]\n# Now to next part of the question- is this equal across the phylogenic groups?\n\n# %% [markdown]\n# First we will check the effect of blur for Clade 2.\n\n# %%\nfrom typing import List\n\n# use the initial result, blur columns to anaylze effect of blur\ndf_all[\"delta_2x8\"] = df_all[\"model acc\"] - df_all[\"model acc_blur2x8\"]\ndf_all[\"delta_5x8\"] = df_all[\"model acc\"] - df_all[\"model acc_blur5x8\"]\ndf_all[\"delta_0x8\"] = df_all[\"model acc\"] - df_all[\"model acc_blur0x8\"]\n\npops = df_all[\"Clade2\"].unique().tolist()\nblurs = [\n    \"delta_2x8\",\n    \"delta_5x8\",\n    \"delta_0x8\",\n]\n\nranksums: List = []\nfor i in range(len(blurs)):\n    for pop1 in pops:\n        for pop2 in pops:\n            ranksum_measurement = ExternalMeasurement(\n                f\"ranksums clade2 {pop1}-{pop2} blur{blurs[i]}\",\n                RankSums,\n                scipy.stats.ranksums,\n            )\n            ranksum: RankSums = ranksum_measurement.evaluate(\n                df_all[df_all[\"Clade2\"] == pop1][blurs[i]],\n                df_all[df_all[\"Clade2\"] == pop2][blurs[i]],\n            )\n            print(f\"blur {blurs[i]}: {ranksum}\")\n            ranksums.append({ranksum.identifier: ranksum.array})\n\nmultiple_ranksums_meas = ExternalMeasurement(\n    f\"multiple ranksums for clade2\", MultipleRanksums, lambda x: x\n)\nmultiple_ranksums: MultipleRanksums = multiple_ranksums_meas.evaluate(ranksums)\nmultiple_ranksums.num_pops = len(pops)\nmultiple_ranksums.save(force=True)\n\n# %% [markdown]\n# Now we check between clade 2 and clade 3.\n\n# %%\ndf_now = (\n    df_all[[\"Clade2\", \"Clade 3\"]]\n    .copy()\n    .groupby([\"Clade2\", \"Clade 3\"])\n    .count()\n    .reset_index()\n)\nps1 = df_now[\"Clade2\"].to_list()\nps2 = df_now[\"Clade 3\"].to_list()\nprint(df_now)\n\nranksums: List = []\nfor k in range(len(blurs)):\n    print(\"\\n\", blurs[k])\n    for i in range(len(ps1)):\n        p1c1 = ps1[i]\n        p1c2 = ps2[i]\n        for j in range(len(ps1)):\n            p2c1 = ps1[j]\n            p2c2 = ps2[j]\n            if (\n                len(\n                    df_all[\n                        (df_all[\"Clade2\"] == p1c1) & (df_all[\"Clade 3\"] == p2c2)\n                    ][blurs[k]]\n                )\n                > 0\n                | len(\n                    df_all[\n                        (df_all[\"Clade2\"] == p2c1) & (df_all[\"Clade 3\"] == p2c2)\n                    ][blurs[k]]\n                )\n                > 0\n            ):\n                ranksum_measurement = ExternalMeasurement(\n                    f\"ranksums {p1c1}-{p2c2} - {p2c1}-{p2c2} blur{blurs[k]}\",\n                    RankSums,\n                    scipy.stats.ranksums,\n                )\n                ranksum: RankSums = ranksum_measurement.evaluate(\n                    df_all[\n                        (df_all[\"Clade2\"] == p1c1) & (df_all[\"Clade 3\"] == p2c2)\n                    ][blurs[k]],\n                    df_all[\n                        (df_all[\"Clade2\"] == p2c1) & (df_all[\"Clade 3\"] == p2c2)\n                    ][blurs[k]],\n                )\n                ranksums.append({ranksum.identifier: ranksum.array})\n\nmultiple_ranksums_meas = ExternalMeasurement(\n    f\"multiple ranksums between clade2 and 3\", MultipleRanksums, lambda x: x\n)\nmultiple_ranksums: MultipleRanksums = multiple_ranksums_meas.evaluate(ranksums)\nmultiple_ranksums.num_pops = len(ps1)\nmultiple_ranksums.save(force=True)\n",
    "description": "The model receives a picture taken at a garden by a member of the general public, and it is a bit blurry.  The model should still be able to successfully identify the flower at the same rate as non-blurry images. Test data needs to include blurred flower images.  Blurred images will be created using ImageMagick. Three datasets will be generated, each with different amounts of blur: minimal blur, maximum blur, and in between minimal and maximum blur. Blurry images are successfully identified at rates equal to that of non-blurred images. This will be measured using the Wilcoxon Rank-Sum test, with significance at p-value <=0.05.",
    "inputs": "three garden populations, model results on Oxford garden data",
    "output": "robustness to noise"
}