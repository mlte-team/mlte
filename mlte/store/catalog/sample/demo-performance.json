{
    "header": {
        "identifier": "performance",
        "creator": "admin",
        "created": 1761163043,
        "updater": null,
        "updated": 1761165071,
        "catalog_id": "sample"
    },
    "tags": [],
    "quality_attribute": "",
    "code": "# ## 2c. Evidence - Performance QAS Measurements\n# \n# Now we collect stored, CPU and memory usage data when predicting with the model, for the Performance scenario.\n\n# ### Initialize MLTE Context\n# \n# MLTE contains a global context that manages the currently active _session_. Initializing the context tells MLTE how to store all of the artifacts that it produces. This import will also set up global constants related to folders and model to use.\n\n# Sets up context for the model being used, sets up constants related to folders and model data to be used.\nfrom demo.scenarios.session import *\n\n\n# ### Measurements\n# \n# Prepare and execute measurements.\n\nfrom mlte.measurement.storage import LocalObjectSize\nfrom mlte.evidence.types.real import Real\nfrom mlte.measurement.units import Units\n\nstore_measurement = LocalObjectSize(\\\"model size\\\")\nsize: Real = store_measurement.evaluate(MODELS_DIR, unit=Units.byte)\nprint(size)\nsize.save(force=True)\n\n\nfrom mlte.measurement.process_measurement import ProcessMeasurement\nfrom mlte.measurement.cpu import LocalProcessCPUUtilization, CPUStatistics\n\ncpu_measurement = LocalProcessCPUUtilization(\\\"predicting cpu\\\")\ncpu_stats: CPUStatistics = cpu_measurement.evaluate(MODEL_COMMAND)\nprint(cpu_stats)\ncpu_stats.save(force=True)\n\n\nfrom mlte.measurement.memory import (\n    LocalProcessMemoryUtilization,\n    MemoryStatistics,\n)\n\nmem_measurement = LocalProcessMemoryUtilization(\\\"predicting memory\\\")\nmem_stats: MemoryStatistics = mem_measurement.evaluate(MODEL_COMMAND)\nprint(mem_stats)\nmem_stats.save(force=True)\n\n\n# We can also avoid starting the training process twice by using the asynch methods for both measurements. We start the training process once and pass the id to both measurements.\n\nfrom mlte.measurement.cpu import LocalProcessCPUUtilization\nfrom mlte.measurement.memory import LocalProcessMemoryUtilization\nfrom mlte.measurement.process_measurement_group import ProcessMeasurementGroup\n\n# Create measurement group\nmeasurements = ProcessMeasurementGroup()\n\n# Add measurements to group.\nmeasurements.add(LocalProcessCPUUtilization(\\\"predicting cpu\\\"))\nmeasurements.add(LocalProcessMemoryUtilization(\\\"predicting memory\\\"))\n\n# Evaluate the measurements.\nevidences = measurements.evaluate(command=MODEL_COMMAND)\n\n# Get results.\ncpu_stats = evidences[\\\"predicting cpu\\\"]\nmem_stats = evidences[\\\"predicting memory\\\"]\n\n# Inspect values\nprint(cpu_stats)\nprint(mem_stats)\n\n# Save to artifact store\ncpu_stats.save(force=True)\nmem_stats.save(force=True)\n",
    "description": "",
    "inputs": "",
    "output": ""
}