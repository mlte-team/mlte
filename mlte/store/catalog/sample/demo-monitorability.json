{
    "header": {
        "identifier": "demo-monitorability",
        "creator": "admin",
        "created": 1727114774,
        "updater": null,
        "updated": -1,
        "catalog_id": "sample"
    },
    "tags": [
        "General"
    ],
    "quality_attribute": "Detect OOD inputs and shifts in output",
    "code": "# ## 2h. Evidence - Monitorability QAS Measurements\n# \n# Measurements to monitor and detect issues with changes in inputs and outputs.\n\n# ### Initialize MLTE Context\n# \n# MLTE contains a global context that manages the currently active _session_. Initializing the context tells MLTE how to store all of the artifacts that it produces. This import will also set up global constants related to folders and model to use.\n\n# Sets up context for the model being used, sets up constants related to folders and model data to be used.\nfrom demo.scenarios.session import *\n\n\n# ### Helper Functions\n# Prepare all functions and data for the measurements.\n\n# Load model module\nfrom demo.scenarios import model_predict\n\n\ndef run_and_get_log() -> str:\n    \\\"\\\"\\\"Runs the model and gets the log.\\\"\\\"\\\"\n    model_predict.run_model(OOD_DATASET_DIR, MODEL_FILE_PATH)\n    return model_predict.load_log()\n\n\n# ### Measurements\n# \n# Finally, we execute the measurements and store the results.\n\nfrom mlte.measurement.external_measurement import ExternalMeasurement\nfrom mlte.evidence.types.string import String\n\n# Evaluate, identifier has to be the same one defined in the Spec.\nmeasurement = ExternalMeasurement(\\\"detect ood inputs\\\", String, run_and_get_log)\nresult = measurement.evaluate()\n\n# Inspect value\n# print(result)\n\n# Save to artifact store\nresult.save(force=True)\n\n\nfrom mlte.measurement.external_measurement import ExternalMeasurement\nfrom mlte.evidence.types.string import String\n\n# Evaluate, identifier has to be the same one defined in the TestSuite.\nmeasurement = ExternalMeasurement(\n    \\\"monitor output confidence shift\\\", String, run_and_get_log\n)\nresult = measurement.evaluate()\n\n# Inspect value\n# print(result)\n\n# Save to artifact store\nresult.save(force=True)\n",
    "description": "During normal operation, the ML pipeline will log errors when out of distribution data is observed. The ML pipeline will create a log entry with a tag. During normal operation, ML pipeline will log errors when the output distribution changes. The ML pipeline will create a log entry with a tag.",
    "inputs": "existing ML model, sample image data that has out of bounds input, and that produces output confidence error",
    "output": "log with input issues tagged"
}